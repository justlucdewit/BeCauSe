// Self hosted bcs compiler

// Imported libraries
import "std/io"

// List of built in words
enum OP
    PUSH_INT
    DUMP
    ADD
end

macro DUMP_PROGRAM
    // Print the first line
    "------------\n" IO_WRITE

    // Loop over the operations
    0 while dup OPS_COUNT @64 < do
        // Get pointer to the current program instruction
        dup sizeof(OP) * OPS +

        // Print its data
        "Type:    " IO_WRITE dup     @64 dump
        "Operand: " IO_WRITE 8 + @64 dump
        "------------\n" IO_WRITE

        // Increment the index
        1 +
    end

    drop
end

// struct Operation {
//     type: u64
//     operand: u64
// }

macro sizeof(OP) 16 end

// Operation[]
macro OPS_COUNT mem end
macro OPS OPS_COUNT 8 + end

// arguments: type operand
macro PUSH_OP
    // Get the pointer to where the new op should be
    OPS_COUNT @64 sizeof(OP) * OPS +

    // Write the operand into memory
    dup 8 + rot swap !64

    // Write the type into memory
    !64

    // Increment the OPS_COUNT
    OPS_COUNT @64 1 + OPS_COUNT !64
end

// fill up the program with
// hard coded operations
OP:PUSH_INT 5 PUSH_OP
OP:PUSH_INT 6 PUSH_OP
OP:ADD 0      PUSH_OP
OP:DUMP 0     PUSH_OP

// Print the program
DUMP_PROGRAM

macro COMPILED_PROGRAM
    // Uninplemented
end

macro SIMULATE_PROGRAM
    // Uninplemented
end